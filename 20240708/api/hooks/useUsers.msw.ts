/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * User API
 * OpenAPI spec version: 0.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { User } from "../models";

export const getUsersGetUsersResponseMock = (): User[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    email: faker.word.sample(),
    id: faker.word.sample(),
    name: faker.word.sample(),
  }));

export const getUsersGetUserResponseMock = (
  overrideResponse: Partial<User> = {}
): User => ({
  email: faker.word.sample(),
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getUsersGetUsersMockHandler = (
  overrideResponse?:
    | User[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<User[]> | User[])
) => {
  return http.get("*/users", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersGetUsersResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getUsersGetUserMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<User> | User)
) => {
  return http.get("*/users/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersGetUserResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getUserAPIMock = () => [
  getUsersGetUsersMockHandler(),
  getUsersGetUserMockHandler(),
];
